def https_public_root = '/net/co2/c2sm-data/jenkins/extpar-request/'

pipeline {
    agent {
        node {
            label 'atmos'
        }
    }
    options {
    timeout(time: 3, unit: 'HOURS')
    }
    stages {
        stage('Create archive') {
            steps {
                sh """
                mkdir -p ${WORKSPACE}/output/logs
                """
            }
        }
        stage('Create Hash from Build ID') {
            steps {
                sh """
                python3 src/hash.py --build-id ${BUILD_ID} --hash-file ${WORKSPACE}/hash.txt
                """
            }
        }
        stage('Validate User Input') {
            steps {
                sh """
                python3 src/validate_user_input.py --comment_body '${env.ghprbCommentBody}' || 
                (echo "The request you submitted is not valid! \n Please check for typos or wrong format of JSON" > ${WORKSPACE}/output/logs/pipeline.log &&
                exit 1)
                """
            }
        }
        stage('Prepare workspace') {
            steps {
                sh """
                mkdir -p ${WORKSPACE}/extpar
                mkdir -p ${WORKSPACE}/icontools
                """
            }
        }
        stage('Generate ICON grid') {
            steps {
                sh """ 
                cd ${WORKSPACE}/icontools
                echo "Generating ICON grid"
                """
            }
        }
        stage('Generate external parameters') {
            steps {
                sh """ 
                cd ${WORKSPACE}/extpar
                echo "Generating external parameters"
                """
            }
        }
    }
    post {
        success {
            sh "mkdir -p zephyr/run/log && touch zephyr/run/log/ignore"
            sh "cp zephyr/run/log/* ${WORKSPACE}/output/logs"
            sh "zip -r output.zip output"
            sh "python3 src/copy_zip.py --zip-file output.zip --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id ${ghprbPullId} --hash-file ${WORKSPACE}/hash.txt --keyword-file ${WORKSPACE}/keywords.json"
            }
            deleteDir()
        }
        failure {
            sh "mkdir -p zephyr/run/log && touch zephyr/run/log/ignore"
            sh "cp zephyr/run/log/* ${WORKSPACE}/output/logs"
            sh "zip -r output.zip output"
            sh "python3 src/copy_zip.py --zip-file output.zip --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id ${ghprbPullId} --hash-file ${WORKSPACE}/hash.txt --failure --keyword-file ${WORKSPACE}/keywords.json"
            }
            deleteDir()
        }
        aborted {
            sh "mkdir -p zephyr/run/log && touch zephyr/run/log/ignore"
            sh "cp zephyr/run/log/* ${WORKSPACE}/output/logs"
            sh "zip -r output.zip output"
            sh "python3 src/copy_zip.py --zip-file output.zip --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id ${ghprbPullId} --hash-file ${WORKSPACE}/hash.txt --keyword-file ${WORKSPACE}/keywords.json --abort"
            }
            deleteDir()
        }
    }
}
