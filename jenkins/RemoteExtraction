def https_public_root = '/net/co2/c2sm-data/jenkins/extpar-request/'

pipeline {
    agent {
        node {
            label 'co2'
        }
    }
    options {
    timeout(time: 3, unit: 'HOURS')
    }
    stages {
        stage('Create archive') {
            steps {
                sh """
                mkdir -p ${WORKSPACE}/output/logs
                """
            }
        }
        stage('Create Hash from Build ID') {
            steps {
                sh """
                python3 src/hash.py --build-id ${BUILD_ID} --hash-file ${WORKSPACE}/hash.txt
                """
            }
        }
        stage('Validate User Input') {
            steps {
                withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                    sh """
                    python3 src/validate_user_input.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id_file ${WORKSPACE}/issue.txt ||
                    (echo "The request you submitted is not valid! \n Please check for typos or wrong format of JSON" > ${WORKSPACE}/output/logs/pipeline.log &&
                    exit 1)
                    """
                }
            }
        }
        stage('Prepare workspace') {
            steps {
                sh """
                mkdir -p ${WORKSPACE}/extpar
                cp config.json ${WORKSPACE}/extpar/config.json 
                mkdir -p ${WORKSPACE}/icontools
                python3 src/gridgen_namelist.py --config config.json
                """
            }
        }
        stage('Generate ICON grid') {
            steps {
                sh """ 
                cd ${WORKSPACE}/icontools
                podman run  -w /work -u 0 -v ${WORKSPACE}/icontools:/work -t icontools /home/dwd/icontools/icongridgen --nml /work/nml_gridgen


                """
            }
        }
        stage('Generate external parameters') {
            steps {
                sh """ 
                cd ${WORKSPACE}/extpar
                podman run \
                    -v /c2sm-data/extpar-input-data:/data \
                    -v ${WORKSPACE}/icontools:/grid \
                    -v ${WORKSPACE}/extpar:/work \
                    extpar-image \
                    python3 -m extpar.WrapExtpar \
                    --run-dir /work \
                    --raw-data-path /data/linked_data \
                    --account none \
                    --no-batch-job \
                    --host docker \
                    --input-grid /grid/global_grid_DOM01.nc \
                    --extpar-config /work/config.json
                """
            }
        }
    }
    post {
        success {
            sh "cp extpar/*.log ${WORKSPACE}/output/logs"
            sh "cp extpar/external_parameter.nc ${WORKSPACE}/output/."
            sh "cp icontools/*.nc ${WORKSPACE}/output/."
            sh "cp icontools/*.html ${WORKSPACE}/output/."
            sh "zip -r output.zip output"
            sh "python3 src/copy_zip.py --zip-file output.zip --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id_file ${WORKSPACE}/issue.txt --hash-file ${WORKSPACE}/hash.txt"
            }
            deleteDir()
        }
        failure {
            sh "cp extpar/*.log ${WORKSPACE}/output/logs"
            sh "cp extpar/external_parameter.nc ${WORKSPACE}/output/. || true"
            sh "cp icontools/*.nc ${WORKSPACE}/output/. || true"
            sh "cp icontools/*.html ${WORKSPACE}/output/. || true"
            sh "zip -r output.zip output"
            sh "python3 src/copy_zip.py --zip-file output.zip --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id_file ${WORKSPACE}/issue.txt --hash-file ${WORKSPACE}/hash.txt --failure"
            }
            deleteDir()
        }
        aborted {
            sh "cp extpar/*.log ${WORKSPACE}/output/logs"
            sh "cp extpar/external_parameter.nc ${WORKSPACE}/output/. || true"
            sh "cp icontools/*.nc ${WORKSPACE}/output/. || true"
            sh "cp icontools/*.html ${WORKSPACE}/output/. || true"
            sh "zip -r output.zip output"
            sh "python3 src/copy_zip.py --zip-file output.zip --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id_file ${WORKSPACE}/issue.txt --hash-file ${WORKSPACE}/hash.txt --abort"
            }
            deleteDir()
        }
    }
}
